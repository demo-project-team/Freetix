generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id           String    @id @default(uuid())
    name         String    @unique
    email        String    @unique
    phone        String?   @unique
    passwordHash String?
    profileImage String?
    points       Int       @default(0)
    bookings     Booking[]
    reviews      Review[]
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
}

model Vendor {
    id             String       @id @default(uuid())
    name           String
    description    String?
    categories     Category[]
    mapLat         Float?
    mapLng         Float?
    phone          String
    email          String
    imageUrl       String?
    ratingAvg      Float        @default(0)
    services       Service[]
    reviews        Review[]
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    address        Address?
    addressID      String?
    Organization   Organization @relation(fields: [OrganizationId], references: [id])
    OrganizationId String       @unique
    rooms          Room[]
}

model Category {
    id      String    @id @default(uuid())
    name    String
    icon    String?
    vendors Vendor[]
    Service Service[]
}

model Service {
    id              String            @id @default(uuid())
    name            String
    description     String?
    durationMinutes Int
    price           Float
    category        Category          @relation(fields: [categoryId], references: [id])
    categoryId      String
    imageUrl        String?
    vendor          Vendor            @relation(fields: [vendorId], references: [id])
    vendorId        String
    schedules       ServiceSchedule[]
    createdAt       DateTime          @default(now())
}

model ServiceSchedule {
    id        String    @id @default(uuid())
    service   Service   @relation(fields: [serviceId], references: [id])
    serviceId String
    date      DateTime
    startTime DateTime
    endTime   DateTime
    isBooked  Boolean   @default(false)
    booking   Booking[] @relation("booking")
}

model Booking {
    id                String          @id @default(uuid())
    user              User            @relation(fields: [userId], references: [id])
    userId            String
    serviceSchedule   ServiceSchedule @relation("booking", fields: [serviceScheduleId], references: [id])
    serviceScheduleId String
    status            BookingStatus   @default(PENDING)
    paymentStatus     PaymentStatus   @default(UNPAID)
    notes             String?
    payment           Payment?        @relation("Payment")
    createdAt         DateTime        @default(now())
}

model Review {
    id        String   @id @default(uuid())
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    vendor    Vendor   @relation(fields: [vendorId], references: [id])
    vendorId  String
    rating    Int
    comment   String?
    createdAt DateTime @default(now())
}

model Payment {
    id            String   @id @default(uuid())
    booking       Booking  @relation("Payment", fields: [bookingId], references: [id])
    bookingId     String   @unique
    amount        Float
    method        String
    transactionId String
    paidAt        DateTime
}

model Address {
    id          String   @id @default(uuid())
    street      String
    city        City     @relation(fields: [cityId], references: [id])
    cityId      String
    district    District @relation(fields: [districtId], references: [id])
    SumOrKhoroo String
    vendor      Vendor   @relation(fields: [vendorID], references: [id], onDelete: Cascade)
    vendorID    String   @unique
    districtId  String
}

model District {
    id      String    @id @default(uuid())
    name    String
    city    City      @relation(fields: [cityId], references: [id])
    cityId  String
    Address Address[]
}

model City {
    id       String     @id @default(uuid())
    name     String
    district District[]
    Address  Address[]
}

model Organization {
    id                   String   @id @default(uuid())
    name                 String
    email                String
    passwordHash         String
    phone                String
    createdAt            DateTime @default(now())
    updatedAt            DateTime @updatedAt
    vendor               Vendor?
    OrganizationRegister String   @unique
    request              Request  @default(PENDING)
}

enum BookingStatus {
    PENDING
    CONFIRMED
    CANCELLED
    COMPLETED
}

enum PaymentStatus {
    UNPAID
    PAID
}

enum Request {
    APPROVED
    CANCELLED
    PENDING
}

model Room {
    id        String   @id @default(uuid())
    name      String
    vendor    Vendor   @relation(fields: [vendorId], references: [id])
    vendorId  String
    tables    Table[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    type      RoomType
}

model Table {
    id        String   @id @default(uuid())
    name      String
    room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
    roomId    String
    pcs       PC[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model PC {
    id        String   @id @default(uuid())
    name      String
    table     Table    @relation(fields: [tableId], references: [id], onDelete: Cascade)
    tableId   String
    row       Int
    column    Int
    status    PCStatus @default(AVAILABLE)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum PCStatus {
    AVAILABLE
    BOOKED
    IN_USE
    MAINTENANCE
}

enum RoomType {
    VIP
    STANDART
}
