generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model User {
    id           String        @id @default(uuid())
    name         String        @unique
    email        String        @unique
    phone        String?       @unique
    passwordHash String?
    profileImage String?
    points       Int           @default(0)
    bookings     Booking[]
    reviews      Review[]
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    notifcations Notifcation[]
}

model Vendor {
    id             String       @id @default(uuid())
    name           String
    description    String?
    categories     Category[]
    mapLat         Float?
    mapLng         Float?
    phone          String
    email          String
    imageUrl       String?
    ratingAvg      Float        @default(0)
    reviews        Review[]
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    address        Address?
    addressID      String?
    Organization   Organization @relation(fields: [OrganizationId], references: [id])
    OrganizationId String       @unique
    rooms          Room[]
    images         Images[]
}

model Category {
    id      String   @id @default(uuid())
    name    String
    icon    String?
    vendors Vendor[]
}

model Booking {
    id          String        @id @default(uuid())
    user        User          @relation(fields: [userId], references: [id])
    userId      String
    pcs         PC[]          @relation("BookingPC")
    startTime   DateTime
    endTime     DateTime
    status      BookingStatus @default(PENDING)
    createdAt   DateTime      @default(now())
    payment     Payment?      @relation("BookingPayment")
    paymentId   String?
    notifcation Boolean       @default(false)
}

model Payment {
    id            String        @id @default(uuid())
    booking       Booking       @relation("BookingPayment", fields: [bookingId], references: [id])
    bookingId     String        @unique
    amount        Float
    transactionId String?
    paidAt        DateTime?
    method        String
    status        PaymentStatus @default(UNPAID)
}

model Review {
    id        String   @id @default(uuid())
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    vendor    Vendor   @relation(fields: [vendorId], references: [id])
    vendorId  String
    rating    Int
    comment   String?
    createdAt DateTime @default(now())
}

model Address {
    id          String   @id @default(uuid())
    street      String
    city        City     @relation(fields: [cityId], references: [id])
    cityId      String
    district    District @relation(fields: [districtId], references: [id])
    SumOrKhoroo String
    vendor      Vendor   @relation(fields: [vendorID], references: [id], onDelete: Cascade)
    vendorID    String   @unique
    districtId  String
}

model District {
    id      String    @id @default(uuid())
    name    String
    city    City      @relation(fields: [cityId], references: [id])
    cityId  String
    Address Address[]
}

model City {
    id       String     @id @default(uuid())
    name     String
    district District[]
    Address  Address[]
}

model Organization {
    id                   String   @id @default(uuid())
    name                 String
    email                String
    passwordHash         String
    phone                String
    createdAt            DateTime @default(now())
    updatedAt            DateTime @updatedAt
    vendor               Vendor?
    OrganizationRegister String   @unique
    request              Request  @default(PENDING)
}

enum BookingStatus {
    PENDING
    CONFIRMED
    CANCELLED
    COMPLETED
}

enum PaymentStatus {
    UNPAID
    PAID
}

enum Request {
    APPROVED
    CANCELLED
    PENDING
}

model Room {
    id             String   @id @default(uuid())
    name           String
    vendor         Vendor   @relation(fields: [vendorId], references: [id])
    vendorId       String
    tables         Table[]
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
    type           RoomType
    pcPricePerHour Int
}

model Table {
    id        String   @id @default(uuid())
    name      String
    room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
    roomId    String
    pcs       PC[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model PC {
    id        String    @id @default(uuid())
    name      String
    table     Table     @relation(fields: [tableId], references: [id], onDelete: Cascade)
    tableId   String
    row       Int
    column    Int
    status    PCStatus  @default(AVAILABLE)
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    bookings  Booking[] @relation("BookingPC")
}

enum PCStatus {
    AVAILABLE
    BOOKED
    IN_USE
    MAINTENANCE
    PENDING
    DELETED
}

enum RoomType {
    VIP
    STANDART
}

model Images {
    id       String @id @default(uuid())
    url      String
    vendor   Vendor @relation(fields: [vendorId], references: [id])
    vendorId String
}

model session {
    sid    String   @id
    sess   Json
    expire DateTime

    @@index([expire], name: "IDX_session_expire")
    @@map("session")
}

model Notifcation {
    id        String   @id @default(uuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    message   String
    readed    Boolean  @default(false)
    createdAt DateTime @default(now())
}
